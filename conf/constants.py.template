# Copyright 2015 Google Inc. All Rights Reserved.

"""AppRTC Constants.

This module contains the constants used in AppRTC Python modules.
"""
import os

##################################################
#################Config parmaters#################

# apprtc base url
APPRTC_BASE_URL='192.168.1.100'

#colider base url
COLLIDER_BASE_URL='192.168.1.100'

#ice zookeeeper request
ICE_SERVER_BASE_URL = "http://192.168.10.250:8081/simpleweb"

# turnserver base url
TURN_BASE_URL='192.168.1.100'

# turnserver external port
TURN_SERVER_PORT=3478

# External tls check
IS_TLS_SUPPORT=False

# Roomserver ColiderServer external protocal
HTTP_PREX_PROTOCAL='http'

# Colider Server Inner port
COLIDER_INNER_PORT=8089

##################################################
##################################################

# Deprecated domains which we should to redirect to REDIRECT_URL.
REDIRECT_DOMAINS =  [
  'apprtc.appspot.com', 'apprtc.webrtc.org', 'www.appr.tc'
]
# URL which we should redirect to if matching in REDIRECT_DOMAINS.
REDIRECT_URL = 'https://appr.tc'

ROOM_MEMCACHE_EXPIRATION_SEC = 60 * 60 * 24

MEMCACHE_RETRY_LIMIT = 100

LOOPBACK_CLIENT_ID = 'LOOPBACK_CLIENT_ID'

ROOM_REQUEST_ID = 'ROOM_REQUEST_ID'

TURN_TCP_SERVER = "turn:%s:%d?transport=tcp" % (TURN_BASE_URL,TURN_SERVER_PORT)
TURN_UDP_SERVER = "turn:%s:%d?transport=udp" % (TURN_BASE_URL,TURN_SERVER_PORT)
STUN_SERVER = "stun:%s:%d" % (TURN_BASE_URL,TURN_SERVER_PORT)
HTTP_BASE_URL = "%s://%s" % (HTTP_PREX_PROTOCAL,APPRTC_BASE_URL)


COLIDER_BASE_URL_WITHOUT_PROTOCAL = "%s/colider" % (COLLIDER_BASE_URL)

COLIDER_INNER_POST_URL_WITH_PROTOCAL = 'http://localhost:%d/colider' % (COLIDER_INNER_PORT)

ROOM_SERVER_URL="%s/avchat" % (HTTP_BASE_URL)

TURN_SERVER_OVERRIDE = [
   {
     "urls": [
       TURN_TCP_SERVER,
       TURN_UDP_SERVER
     ],
     "username": "charles",
     "credential": "123456"
   },
   {
     "urls": [
       STUN_SERVER
     ]

   }
 ]


TURN_URL_TEMPLATE = '%s/turn.php?username=%s&key=%s'
CEOD_KEY = '1234'


ICE_SERVER_URL_TEMPLATE = '%s/v1alpha/iceconfig/%s'

ICE_SERVER_API_KEY = '1234567'


CALLSTATS_PARAMS = {
  'appId': os.environ.get('CALLSTATS_APP_ID'),
  'appSecret': os.environ.get('CALLSTATS_APP_SECRET')
}

# Dictionary keys in the collider instance info constant.
WSS_INSTANCE_HOST_KEY = 'host_port_pair'
WSS_INSTANCE_NAME_KEY = 'vm_name'
WSS_INSTANCE_ZONE_KEY = 'zone'
WSS_INSTANCES = [{
    WSS_INSTANCE_HOST_KEY: COLIDER_BASE_URL_WITHOUT_PROTOCAL,#'apprtc-ws.webrtc.org:443',
    WSS_INSTANCE_NAME_KEY: 'wsserver-std',
    WSS_INSTANCE_ZONE_KEY: 'us-central1-a'
}, {
    WSS_INSTANCE_HOST_KEY: COLIDER_BASE_URL_WITHOUT_PROTOCAL,#'apprtc-ws-2.webrtc.org:443',
    WSS_INSTANCE_NAME_KEY: 'wsserver-std-2',
    WSS_INSTANCE_ZONE_KEY: 'us-central1-f'
}]

WSS_HOST_PORT_PAIRS = [ins[WSS_INSTANCE_HOST_KEY] for ins in WSS_INSTANCES]

# memcache key for the active collider host.
WSS_HOST_ACTIVE_HOST_KEY = 'wss_host_active_host'

# Dictionary keys in the collider probing result.
WSS_HOST_IS_UP_KEY = 'is_up'
WSS_HOST_STATUS_CODE_KEY = 'status_code'
WSS_HOST_ERROR_MESSAGE_KEY = 'error_message'

RESPONSE_ERROR = 'ERROR'
RESPONSE_ROOM_FULL = 'FULL'
RESPONSE_UNKNOWN_ROOM = 'UNKNOWN_ROOM'
RESPONSE_UNKNOWN_CLIENT = 'UNKNOWN_CLIENT'
RESPONSE_DUPLICATE_CLIENT = 'DUPLICATE_CLIENT'
RESPONSE_SUCCESS = 'SUCCESS'
RESPONSE_INVALID_REQUEST = 'INVALID_REQUEST'

IS_DEV_SERVER = os.environ.get('APPLICATION_ID', '').startswith('dev')

BIGQUERY_URL = 'https://www.googleapis.com/auth/bigquery'

# Dataset used in production.
BIGQUERY_DATASET_PROD = 'prod'

# Dataset used when running locally.
BIGQUERY_DATASET_LOCAL = 'dev'

# BigQuery table within the dataset.
BIGQUERY_TABLE = 'analytics'
